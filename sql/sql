################################################################################
#   SELECT - extracts data from a database				       #	
#   UPDATE - updates data in a database					       #
#   DELETE - deletes data from a database				       #
#   INSERT INTO - inserts new data into a database			       #
#   CREATE DATABASE - creates a new database                                   #
#   ALTER DATABASE - modifies a database                                       #
#   CREATE TABLE - creates a new table                                         #
#   ALTER TABLE - modifies a table                                             #
#   DROP TABLE - deletes a table                                               #
#   CREATE INDEX - creates an index (search key)                               #
#   DROP INDEX - deletes an index                                              #
################################################################################

//Single Line Comments
 --commects
//multi line comments
	/* 
		comments
	*/


// to create a database
	CREATE DATABASE school;


// to drop a database
	DROP DATABASE school;


// to create table
	CREATE TABLE student
	(
	StudentID int,
	LastName varchar(255),
	FirstName varchar(255)
	);


// to drop table 
	

// Create Table Using Another Table
	CREATE TABLE new_table_name AS
	    SELECT column1, column2,...
	    FROM existing_table_name
	    WHERE ....; 


// to clear the table 
	TRUNCATE TABLE student;


// ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
//  also used to add and drop various constraints on an existing table.
	ALTER TABLE student
	ADD  address varchar(255);
	****
	ALTER TABLE student
	DROP COLUMN address;  
	****
//to change the data type
	ALTER TABLE table_name
	ALTER COLUMN column_name datatype; 
	****

// SELECT statement 
	SELECT * FROM table_name;  
	SELECT LastName, FirstName FROM Customers;


//The SELECT DISTINCT statement is used to return only distinct (different) values.
//Inside a table, a column often contains many duplicate values;
//The SELECT DISTINCT statement is used to return only distinct (different) values.
	SELECT DISTINCT column1, column2 FROM table_name; 
	SELECT COUNT(DISTINCT Country) FROM Customers; >> returns count of rows 


//The WHERE clause is used to extract only those records that fulfill a specified condition.
	SELECT StudentID FROM student WHERE StudentID = 1;
################################################################################
= 	Equal
<> 	Not equal. Note: In some versions of SQL this operator may be written as !=
> 	Greater than
< 	Less than
>= 	Greater than or equal
<= 	Less than or equal
BETWEEN 	Between an inclusive range
LIKE 	 Search for a pattern
NOT LIKE  
IN 	To specify multiple possible values for a column 
###############################################################################
//operators 
//AND Syntax
	SELECT column1, column2, ...
	FROM table_name
	WHERE condition1 AND condition2 AND condition3 ...;
//OR Syntax
	SELECT column1, column2, ...
	FROM table_name
	WHERE condition1 OR condition2 OR condition3 ...;
//NOT Syntax
	SELECT column1, column2, ...
	FROM table_name
	WHERE NOT condition; 


// INSERT INTO statement 
//It is possible to write the INSERT INTO statement in two ways.
	//first
	INSERT INTO table_name (column1, column2, column3, ...)
	VALUES (value1, value2, value3, ...);
	//second 
	INSERT INTO table_name
	VALUES (value1, value2, value3, ...); 


//null value 
	WHERE FirstName IS NULL; 
	WHERE FirstName IS NOT NULL;


// UPDATE statement 
	UPDATE table_name
	SET column1 = value1, column2 = value2, ...
	WHERE condition; 


//DELETE statement is used to delete existing records in a table.
	DELETE table_name
	WHERE condition;


// LIKE Operator is used in a WHERE clause to search for a specified pattern in a column.
WHERE CustomerName LIKE 'a%' 	Finds any values that starts with "a"
WHERE CustomerName LIKE '%a' 	Finds any values that ends with "a"
WHERE CustomerName LIKE '%a%' 	Finds any values that have "a" in any position
WHERE CustomerName LIKE '_r%' 	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%_%' Finds any values that starts with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o' 	Finds any values that starts with "a" and ends with "o"
% - The percent sign represents zero, one, or multiple characters
_ - The underscore represents a single character


//IN operator allows you to specify multiple values in a WHERE clause
//a بتخليك تحط شرط يحتمل اكتر من قيمه 
	SELECT * FROM Customers
	WHERE Country IN ('Germany', 'France', 'UK');


//BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
	SELECT * FROM Products
	WHERE Price BETWEEN 10 AND 20;

	SELECT * FROM Products
	WHERE (Price BETWEEN 10 AND 20)
	AND NOT CategoryID IN (1,2,3);

	SELECT * FROM Orders
	WHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;


// AS operator SQL aliases are used to give a table, or a column in a table, a temporary name.
	SELECT CustomerID as ID, CustomerName AS Customer FROM Customers; 
// AS for tables 
	SELECT o.OrderID, o.OrderDate, c.CustomerName
	FROM Customers AS c, Orders AS o
	WHERE c.CustomerName="Around the Horn" AND c.CustomerID=o.CustomerID;


// concat to concatonat columns
	SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address FROM Customers; 



//SQL JOIN clause is used to combine rows from two or more tables, based on a related column between them.
	SELECT Orders.OrderID, Customers.CustomerName
	FROM Orders
	INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID; 

// constrains 

    NOT NULL - Ensures that a column cannot have a NULL value
    UNIQUE - Ensures that all values in a column are different
    PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
    FOREIGN KEY - Uniquely identifies a row/record in another table
    CHECK - Ensures that all values in a column satisfies a specific condition
    DEFAULT - Sets a default value for a column when no value is specified
    INDEX - Used to create and retrieve data from the database very quickly



// NOT NULL  >> The NOT NULL constraint enforces a column to NOT accept NULL values.
	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255) NOT NULL,
	    Age int
			); 


// UNIQUE constraint ensures that all values in a column are different.
	CREATE TABLE Persons (
	    ID int NOT NULL UNIQUE,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int
			);



//The PRIMARY KEY constraint uniquely identifies each record in a database table.
//Primary keys must contain UNIQUE values, and cannot contain NULL values.
//A table can have only one primary key, which may consist of single or multiple fields.
	CREATE TABLE Persons (
	    ID int NOT NULL PRIMARY KEY,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int
	); 



//A FOREIGN KEY is a key used to link two tables together.
//A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.
//The table containing the foreign key is called the child table, and the table containing the candidate key is called the
//referenced or parent table.
	CREATE TABLE Orders (
	    OrderID int NOT NULL,
	    OrderNumber int NOT NULL,
	    PersonID int,
	    PRIMARY KEY (OrderID),
	    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
	); 




//The CHECK constraint is used to limit the value range that can be placed in a column.
//If you define a CHECK constraint on a single column it allows only certain values for this column.
//If you define a CHECK constraint on a table it can limit the values in certain columns 
//based on values in other columns in the row.
//CHECK constraint ensures that you can not have any person below 18 years:
	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    CHECK (Age>=18)
	); 

//he DEFAULT constraint is used to provide a default value for a column.
//The default value will be added to all new records IF no other value is specified.
	City varchar(255) DEFAULT 'Sandnes'
	OrderDate date DEFAULT GETDATE()


//Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.
	CREATE TABLE Persons (
    ID int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
	); 

	INSERT INTO Persons (FirstName,LastName)
	VALUES ('Lars','Monsen');
